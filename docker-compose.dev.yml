version: '3.8'

networks:
  project_dev_net:
    driver: bridge

services:
  postgres:
    image: postgres:17
    container_name: db-dev
    profiles: ["dev"]
    networks: ["project_dev_net"]
    environment:
      POSTGRES_USER: ${DB_USER:-kumon_dev_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-dev_password_change_me}
      POSTGRES_DB: ${DB_NAME:-kumon_dev}
    ports:
      - "${DB_PORT:-5433}:5432"
    volumes:
      - pg_data_dev:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-kumon_dev_user} -d ${DB_NAME:-kumon_dev}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  redis:
    image: redis:7-alpine
    container_name: redis-dev
    profiles: ["dev"]
    networks: ["project_dev_net"]
    ports:
      - "${REDIS_PORT:-6380}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  app:
    build: .
    container_name: app-dev
    profiles: ["dev"]
    networks: ["project_dev_net"]
    env_file:
      - .env-dev
    ports:
      - "${APP_PORT:-3001}:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - .:/app
      - /app/__pycache__
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  # Evolution API Mock (ativado apenas com USE_EVOLUTION_MOCK=true)
  evo-mock:
    image: node:20-alpine
    container_name: evo-mock-dev
    profiles: ["dev-mock"]
    networks: ["project_dev_net"]
    ports:
      - "8081:8081"
    environment:
      - NODE_ENV=development
    command: >
      sh -lc "
      echo 'Installing Express...' &&
      npm init -y &&
      npm install express &&
      echo 'Starting Evolution API Mock on port 8081...' &&
      node -e \"
        const express = require('express');
        const app = express();
        app.use(express.json());
        app.all('/*', (req, res) => {
          console.log('MOCK_EVO:', req.method, req.url, JSON.stringify(req.body).slice(0, 200));
          res.json({
            status: 'ok',
            messageId: 'mock_' + Date.now(),
            timestamp: new Date().toISOString(),
            mock: true
          });
        });
        app.listen(8081, '0.0.0.0', () => {
          console.log('🚀 Evolution API Mock listening on http://0.0.0.0:8081');
          console.log('📝 All requests will be logged and return 200 OK');
        });
      \"
      "
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8081/health"]
      interval: 10s
      timeout: 5s
      retries: 3

volumes:
  pg_data_dev:
