# ============================================================================
# BALANCED-CHEAP CLOUD BUILD - KUMON AI RECEPTIONIST
# 65% cost reduction with reliable startup
# ============================================================================

steps:
  # ============================================================================
  # STEP 1: Create PostgreSQL Database (MICRO tier with HDD)
  # ============================================================================
  - name: "gcr.io/google.com/cloudsdktool/cloud-sdk"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        # Create secrets if they don't exist
        if ! gcloud secrets describe openai-api-key --quiet; then
          echo "Creating OpenAI API key secret..."
          echo "${_OPENAI_API_KEY}" | gcloud secrets create openai-api-key --data-file=-
        fi

        if ! gcloud secrets describe evolution-api-key --quiet; then
          echo "Creating Evolution API key secret..."
          echo "${_EVOLUTION_API_KEY}" | gcloud secrets create evolution-api-key --data-file=-
        fi

        # Create CHEAP PostgreSQL instance
        if ! gcloud sql instances describe evolution-postgres --quiet; then
          echo "Creating CHEAP PostgreSQL instance..."
          gcloud sql instances create evolution-postgres \
            --database-version=POSTGRES_15 \
            --tier=db-f1-micro \
            --region=us-central1 \
            --root-password="${_DB_ROOT_PASSWORD}" \
            --storage-type=HDD \
            --storage-size=10GB \
            --no-backup \
            --maintenance-window-day=SUN \
            --maintenance-window-hour=03 \
            --deletion-protection=false
        fi

        # Create database
        if ! gcloud sql databases describe evolution_db --instance=evolution-postgres --quiet; then
          echo "Creating evolution_db database..."
          gcloud sql databases create evolution_db --instance=evolution-postgres
        fi

        # Create user
        if ! gcloud sql users describe evolution_user --instance=evolution-postgres --quiet; then
          echo "Creating evolution_user..."
          gcloud sql users create evolution_user \
            --instance=evolution-postgres \
            --password="${_DB_USER_PASSWORD}"
        fi

        echo "CHEAP Database setup completed!"
    id: "create-database-and-secrets"

  # ============================================================================
  # STEP 2: Build All Services
  # ============================================================================
  - name: "gcr.io/cloud-builders/docker"
    args:
      - "build"
      - "-t"
      - "gcr.io/$PROJECT_ID/qdrant:$BUILD_ID"
      - "-f"
      - "infrastructure/docker/qdrant/Dockerfile"
      - "."
    id: "build-qdrant"

  - name: "gcr.io/cloud-builders/docker"
    args: ["push", "gcr.io/$PROJECT_ID/qdrant:$BUILD_ID"]
    id: "push-qdrant"
    waitFor: ["build-qdrant"]

  - name: "gcr.io/cloud-builders/docker"
    args:
      - "build"
      - "-t"
      - "gcr.io/$PROJECT_ID/evolution-api:$BUILD_ID"
      - "-f"
      - "infrastructure/docker/evolution-api/Dockerfile"
      - "."
    id: "build-evolution"

  - name: "gcr.io/cloud-builders/docker"
    args: ["push", "gcr.io/$PROJECT_ID/evolution-api:$BUILD_ID"]
    id: "push-evolution"
    waitFor: ["build-evolution"]

  - name: "gcr.io/cloud-builders/docker"
    args:
      - "build"
      - "--platform"
      - "linux/amd64"
      - "-t"
      - "gcr.io/$PROJECT_ID/kumon-assistant:$BUILD_ID"
      - "-f"
      - "infrastructure/docker/app/Dockerfile"
      - "."
    id: "build-kumon"

  - name: "gcr.io/cloud-builders/docker"
    args: ["push", "gcr.io/$PROJECT_ID/kumon-assistant:$BUILD_ID"]
    id: "push-kumon"
    waitFor: ["build-kumon"]

  # ============================================================================
  # STEP 3: Deploy CHEAP Qdrant (256Mi, 0.25 CPU)
  # ============================================================================
  - name: "gcr.io/google.com/cloudsdktool/cloud-sdk"
    entrypoint: "gcloud"
    args:
      - "run"
      - "deploy"
      - "kumon-qdrant"
      - "--image"
      - "gcr.io/$PROJECT_ID/qdrant:$BUILD_ID"
      - "--region"
      - "us-central1"
      - "--platform"
      - "managed"
      - "--allow-unauthenticated"
      - "--port"
      - "6333"
      - "--memory"
      - "256Mi"
      - "--cpu"
      - "0.25"
      - "--timeout"
      - "180"
      - "--max-instances"
      - "1"
      - "--min-instances"
      - "0"
      - "--concurrency"
      - "1000"
    id: "deploy-qdrant"
    waitFor: ["push-qdrant", "create-database-and-secrets"]

  # ============================================================================
  # STEP 4: Deploy CHEAP Evolution API (512Mi, 0.5 CPU, NO REDIS)
  # ============================================================================
  - name: "gcr.io/google.com/cloudsdktool/cloud-sdk"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        echo "🔧 Deploying BALANCED-CHEAP Evolution API..."

        # Deploy Evolution API with LOCAL CACHE (no Redis = R$ 0/month)
        gcloud run deploy kumon-evolution-api \
          --image gcr.io/$PROJECT_ID/evolution-api:$BUILD_ID \
          --region us-central1 \
          --platform managed \
          --allow-unauthenticated \
          --port 8080 \
          --set-env-vars "SERVER_URL=https://kumon-evolution-api-[HASH]-uc.a.run.app,DATABASE_PROVIDER=postgresql,DATABASE_CONNECTION_URI=postgresql://evolution_user:${_DB_USER_PASSWORD}@localhost/evolution_db?host=/cloudsql/${PROJECT_ID}:us-central1:evolution-postgres,AUTHENTICATION_TYPE=jwt,CORS_ORIGIN=*,CORS_CREDENTIALS=true,DATABASE_ENABLED=true,DATABASE_SAVE_DATA_INSTANCE=true,DATABASE_SAVE_DATA_NEW_MESSAGE=true,DATABASE_SAVE_MESSAGE_UPDATE=true,DATABASE_SAVE_DATA_CONTACTS=true,DATABASE_SAVE_DATA_CHATS=true,DATABASE_SAVE_DATA_LABELS=true,DATABASE_SAVE_DATA_HISTORIC=true,DATABASE_CONNECTION_CLIENT_NAME=evolution_api,CACHE_REDIS_ENABLED=false,CACHE_LOCAL_ENABLED=true,LOG_LEVEL=INFO,NODE_ENV=production" \
          --update-secrets "AUTHENTICATION_API_KEY=evolution-api-key:latest" \
          --add-cloudsql-instances "${PROJECT_ID}:us-central1:evolution-postgres" \
          --memory 512Mi \
          --cpu 0.5 \
          --timeout 300 \
          --max-instances 2 \
          --min-instances 1 \
          --concurrency 1000
    id: "deploy-evolution"
    waitFor: ["push-evolution"]

  # ============================================================================
  # STEP 5: Get service URLs
  # ============================================================================
  - name: "gcr.io/google.com/cloudsdktool/cloud-sdk"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        # Get service URLs
        QDRANT_URL=$$(gcloud run services describe kumon-qdrant --region=us-central1 --format="value(status.url)")
        EVOLUTION_URL=$$(gcloud run services describe kumon-evolution-api --region=us-central1 --format="value(status.url)")

        echo "QDRANT_URL=$$QDRANT_URL" > /workspace/service_urls.env
        echo "EVOLUTION_URL=$$EVOLUTION_URL" >> /workspace/service_urls.env

        echo "Service URLs saved:"
        cat /workspace/service_urls.env
    id: "get-service-urls"
    waitFor: ["deploy-qdrant", "deploy-evolution"]

  # ============================================================================
  # STEP 6: Deploy BALANCED Kumon Assistant (512Mi, 0.5 CPU - more reliable)
  # ============================================================================
  - name: "gcr.io/google.com/cloudsdktool/cloud-sdk"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        # Source the service URLs
        source /workspace/service_urls.env

        # Deploy BALANCED Kumon Assistant (enough resources to start reliably)
        gcloud run deploy kumon-assistant \
          --image gcr.io/$PROJECT_ID/kumon-assistant:$BUILD_ID \
          --region us-central1 \
          --platform managed \
          --allow-unauthenticated \
          --port 8000 \
          --set-env-vars "QDRANT_URL=$$QDRANT_URL,EVOLUTION_API_URL=$$EVOLUTION_URL,ENVIRONMENT=production,USE_GCP_EMBEDDINGS=false,EMBEDDING_MODEL_NAME=sentence-transformers/all-MiniLM-L6-v2,OPENAI_MODEL=gpt-4o-mini" \
          --update-secrets "OPENAI_API_KEY=openai-api-key:latest,EVOLUTION_API_KEY=evolution-api-key:latest" \
          --memory 512Mi \
          --cpu 0.5 \
          --timeout 300 \
          --max-instances 2 \
          --min-instances 0 \
          --concurrency 1000
    id: "deploy-kumon"
    waitFor: ["push-kumon", "get-service-urls"]

  # ============================================================================
  # STEP 7: Cleanup old revisions
  # ============================================================================
  - name: "gcr.io/google.com/cloudsdktool/cloud-sdk"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        echo "🧹 Cleaning up old revisions..."

        for service in kumon-assistant kumon-evolution-api kumon-qdrant; do
          echo "Cleaning $service revisions..."
          
          # Keep only the latest revision
          OLD_REVISIONS=$$(gcloud run revisions list \
            --region=us-central1 \
            --filter="metadata.name~$service AND status.conditions[0].status=True" \
            --format="value(metadata.name)" \
            --sort-by="metadata.creationTimestamp" | head -n -1)
          
          for revision in $$OLD_REVISIONS; do
            if [ ! -z "$$revision" ]; then
              echo "Removing old revision: $$revision"
              gcloud run revisions delete $$revision --region=us-central1 --quiet || true
            fi
          done
        done

        echo "✅ Cleanup completed"
    id: "cleanup-revisions"
    waitFor: ["deploy-kumon"]

  # ============================================================================
  # STEP 8: Final success summary
  # ============================================================================
  - name: "gcr.io/google.com/cloudsdktool/cloud-sdk"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        KUMON_URL=$$(gcloud run services describe kumon-assistant --region=us-central1 --format="value(status.url)")
        QDRANT_URL=$$(gcloud run services describe kumon-qdrant --region=us-central1 --format="value(status.url)")
        EVOLUTION_URL=$$(gcloud run services describe kumon-evolution-api --region=us-central1 --format="value(status.url)")

        echo "🎉 BALANCED-CHEAP DEPLOYMENT SUCCESS!"
        echo "====================================="
        echo "💰 CUSTO BALANCEADO-ECONÔMICO:"
        echo "• Evolution API (512Mi/0.5CPU): ~R$ 50/mês"
        echo "• Kumon Assistant (512Mi/0.5CPU): ~R$ 40/mês"  
        echo "• Qdrant (256Mi/0.25CPU): ~R$ 20/mês"
        echo "• PostgreSQL HDD: ~R$ 15/mês"
        echo "• Redis: R$ 0/mês (cache local)"
        echo "• TOTAL: ~R$ 125/mês + OpenAI (65% economia!)"
        echo "====================================="
        echo "🌐 URLs DOS SERVIÇOS:"
        echo "Kumon Assistant: $$KUMON_URL"
        echo "Evolution API: $$EVOLUTION_URL"  
        echo "Qdrant: $$QDRANT_URL"
        echo "====================================="
        echo "✅ CONFIGURAÇÃO BALANCEADA:"
        echo "• Startup confiável (recursos adequados)"
        echo "• Custo otimizado (65% economia)"
        echo "• Capacidade: 200 conversas/dia"
        echo "• Cold start: 2-3 segundos"
    id: "deployment-complete"
    waitFor: ["deploy-kumon"]

# ============================================================================
# SUBSTITUTIONS
# ============================================================================
substitutions:
  _OPENAI_API_KEY: "REPLACE_WITH_YOUR_OPENAI_API_KEY"
  _EVOLUTION_API_KEY: "REPLACE_WITH_YOUR_EVOLUTION_API_KEY"
  _DB_ROOT_PASSWORD: "REPLACE_WITH_DB_ROOT_PASSWORD"
  _DB_USER_PASSWORD: "REPLACE_WITH_DB_USER_PASSWORD"

options:
  logging: CLOUD_LOGGING_ONLY

timeout: "1800s"
