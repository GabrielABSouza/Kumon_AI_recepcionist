# ============================================================================
# COMPREHENSIVE CLOUD BUILD - KUMON AI RECEPTIONIST
# Deploys all three services: Qdrant, Evolution API, and Kumon Assistant
# ============================================================================

steps:
  # ============================================================================
  # STEP 1: Create PostgreSQL Database and Secrets
  # ============================================================================
  - name: "gcr.io/google.com/cloudsdktool/cloud-sdk"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        # Create secrets if they don't exist
        if ! gcloud secrets describe openai-api-key --quiet; then
          echo "Creating OpenAI API key secret..."
          echo "${_OPENAI_API_KEY}" | gcloud secrets create openai-api-key --data-file=-
        fi

        if ! gcloud secrets describe evolution-api-key --quiet; then
          echo "Creating Evolution API key secret..."
          echo "${_EVOLUTION_API_KEY}" | gcloud secrets create evolution-api-key --data-file=-
        fi

        # Create PostgreSQL instance if it doesn't exist
        if ! gcloud sql instances describe evolution-postgres --quiet; then
          echo "Creating PostgreSQL instance..."
          gcloud sql instances create evolution-postgres \
            --database-version=POSTGRES_15 \
            --tier=db-f1-micro \
            --region=us-central1 \
            --root-password="${_DB_ROOT_PASSWORD}" \
            --storage-type=SSD \
            --storage-size=10GB \
            --backup-start-time=02:00 \
            --maintenance-window-day=SUN \
            --maintenance-window-hour=03
        fi

        # Create database if it doesn't exist
        if ! gcloud sql databases describe evolution_db --instance=evolution-postgres --quiet; then
          echo "Creating evolution_db database..."
          gcloud sql databases create evolution_db --instance=evolution-postgres
        fi

        # Create user if it doesn't exist
        if ! gcloud sql users describe evolution_user --instance=evolution-postgres --quiet; then
          echo "Creating evolution_user..."
          gcloud sql users create evolution_user \
            --instance=evolution-postgres \
            --password="${_DB_USER_PASSWORD}"
        fi

        # Store the connection string for later use
        echo "postgresql://evolution_user:${_DB_USER_PASSWORD}@/evolution-postgres?host=/cloudsql/${PROJECT_ID}:us-central1:evolution-postgres" > /workspace/db_connection.txt
        echo "Database setup completed!"
    id: "create-database-and-secrets"

  # ============================================================================
  # STEP 2: Build Qdrant (Vector Database)
  # ============================================================================
  - name: "gcr.io/cloud-builders/docker"
    args:
      - "build"
      - "-t"
      - "gcr.io/$PROJECT_ID/qdrant:$BUILD_ID"
      - "-f"
      - "infrastructure/docker/qdrant/Dockerfile"
      - "."
    id: "build-qdrant"

  - name: "gcr.io/cloud-builders/docker"
    args: ["push", "gcr.io/$PROJECT_ID/qdrant:$BUILD_ID"]
    id: "push-qdrant"
    waitFor: ["build-qdrant"]

  # ============================================================================
  # STEP 3: Build Evolution API (WhatsApp Integration)
  # ============================================================================
  - name: "gcr.io/cloud-builders/docker"
    args:
      - "build"
      - "-t"
      - "gcr.io/$PROJECT_ID/evolution-api:$BUILD_ID"
      - "-f"
      - "infrastructure/docker/evolution-api/Dockerfile"
      - "."
    id: "build-evolution"

  - name: "gcr.io/cloud-builders/docker"
    args: ["push", "gcr.io/$PROJECT_ID/evolution-api:$BUILD_ID"]
    id: "push-evolution"
    waitFor: ["build-evolution"]

  # ============================================================================
  # STEP 4: Build Kumon Assistant (Main Application)
  # ============================================================================
  - name: "gcr.io/cloud-builders/docker"
    args:
      - "build"
      - "-t"
      - "gcr.io/$PROJECT_ID/kumon-assistant:$BUILD_ID"
      - "-f"
      - "infrastructure/docker/app/Dockerfile"
      - "."
    id: "build-kumon"

  - name: "gcr.io/cloud-builders/docker"
    args: ["push", "gcr.io/$PROJECT_ID/kumon-assistant:$BUILD_ID"]
    id: "push-kumon"
    waitFor: ["build-kumon"]

  # ============================================================================
  # STEP 5: Deploy Qdrant Service
  # ============================================================================
  - name: "gcr.io/google.com/cloudsdktool/cloud-sdk"
    entrypoint: "gcloud"
    args:
      - "run"
      - "deploy"
      - "kumon-qdrant"
      - "--image"
      - "gcr.io/$PROJECT_ID/qdrant:$BUILD_ID"
      - "--region"
      - "us-central1"
      - "--platform"
      - "managed"
      - "--allow-unauthenticated"
      - "--port"
      - "6333"
      - "--memory"
      - "1Gi"
      - "--cpu"
      - "1"
      - "--timeout"
      - "300"
      - "--max-instances"
      - "3"
      - "--min-instances"
      - "1"
      - "--concurrency"
      - "80"
    id: "deploy-qdrant"
    waitFor: ["push-qdrant", "create-database-and-secrets"]

  # ============================================================================
  # STEP 6: Deploy Evolution API Service
  # ============================================================================
  - name: "gcr.io/google.com/cloudsdktool/cloud-sdk"
    entrypoint: "gcloud"
    args:
      - "run"
      - "deploy"
      - "kumon-evolution-api"
      - "--image"
      - "gcr.io/$PROJECT_ID/evolution-api:$BUILD_ID"
      - "--region"
      - "us-central1"
      - "--platform"
      - "managed"
      - "--allow-unauthenticated"
      - "--port"
      - "8080"
      - "--set-env-vars"
      - "SERVER_URL=https://kumon-evolution-api-[HASH]-uc.a.run.app,DATABASE_PROVIDER=postgresql,DATABASE_CONNECTION_URI=postgresql://evolution_user:evolution123@localhost:5432/evolution_db,AUTHENTICATION_TYPE=jwt,CORS_ORIGIN=*,CORS_CREDENTIALS=true,DATABASE_ENABLED=true,DATABASE_SAVE_DATA_INSTANCE=true,DATABASE_SAVE_DATA_NEW_MESSAGE=true,DATABASE_SAVE_MESSAGE_UPDATE=true,DATABASE_SAVE_DATA_CONTACTS=true,DATABASE_SAVE_DATA_CHATS=true,DATABASE_SAVE_DATA_LABELS=true,DATABASE_SAVE_DATA_HISTORIC=true,DATABASE_CONNECTION_CLIENT_NAME=evolution_api,LOG_LEVEL=INFO,NODE_ENV=production"
      - "--update-secrets"
      - "AUTHENTICATION_API_KEY=evolution-api-key:latest"
      - "--add-cloudsql-instances"
      - "${PROJECT_ID}:us-central1:evolution-postgres"
      - "--memory"
      - "2Gi"
      - "--cpu"
      - "2"
      - "--timeout"
      - "900"
      - "--max-instances"
      - "5"
      - "--min-instances"
      - "1"
      - "--cpu-boost"
      - "--concurrency"
      - "80"
    id: "deploy-evolution"
    waitFor: ["push-evolution", "create-database-and-secrets"]

  # ============================================================================
  # STEP 7: Get service URLs for inter-service communication
  # ============================================================================
  - name: "gcr.io/google.com/cloudsdktool/cloud-sdk"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        # Get service URLs
        QDRANT_URL=$$(gcloud run services describe kumon-qdrant --region=us-central1 --format="value(status.url)")
        EVOLUTION_URL=$$(gcloud run services describe kumon-evolution-api --region=us-central1 --format="value(status.url)")

        # Store URLs in environment for next step
        echo "QDRANT_URL=$$QDRANT_URL" > /workspace/service_urls.env
        echo "EVOLUTION_URL=$$EVOLUTION_URL" >> /workspace/service_urls.env

        echo "Service URLs saved:"
        cat /workspace/service_urls.env
    id: "get-service-urls"
    waitFor: ["deploy-qdrant", "deploy-evolution"]

  # ============================================================================
  # STEP 8: Deploy Kumon Assistant (Main Application)
  # ============================================================================
  - name: "gcr.io/google.com/cloudsdktool/cloud-sdk"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        # Source the service URLs
        source /workspace/service_urls.env

        # Deploy Kumon Assistant with GCP optimized configuration (much lighter!)
        gcloud run deploy kumon-assistant \
          --image gcr.io/$PROJECT_ID/kumon-assistant:$BUILD_ID \
          --region us-central1 \
          --platform managed \
          --allow-unauthenticated \
          --port 8000 \
          --set-env-vars "QDRANT_URL=$$QDRANT_URL,EVOLUTION_API_URL=$$EVOLUTION_URL,ENVIRONMENT=production,USE_GCP_EMBEDDINGS=true,GOOGLE_PROJECT_ID=$PROJECT_ID,GOOGLE_LOCATION=us-central1" \
          --update-secrets "OPENAI_API_KEY=openai-api-key:latest,EVOLUTION_API_KEY=evolution-api-key:latest" \
          --memory 1Gi \
          --cpu 1 \
          --timeout 300 \
          --max-instances 5 \
          --min-instances 0 \
          --concurrency 80
    id: "deploy-kumon"
    waitFor: ["push-kumon", "get-service-urls"]

  # ============================================================================
  # STEP 9: Configure Evolution API webhook
  # ============================================================================
  - name: "gcr.io/google.com/cloudsdktool/cloud-sdk"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        # Get final service URLs
        KUMON_URL=$$(gcloud run services describe kumon-assistant --region=us-central1 --format="value(status.url)")

        echo "ðŸŽ‰ DEPLOYMENT COMPLETE!"
        echo "===================="
        echo "Qdrant URL: $$QDRANT_URL"
        echo "Evolution API URL: $$EVOLUTION_URL"
        echo "Kumon Assistant URL: $$KUMON_URL"
        echo "===================="
        echo "Next steps:"
        echo "1. Configure your WhatsApp webhook to point to: $$KUMON_URL/api/v1/evolution/webhook"
        echo "2. Update Evolution API instance settings if needed"
        echo "3. Test the system with a WhatsApp message"
    id: "deployment-complete"
    waitFor: ["deploy-kumon"]

# ============================================================================
# SUBSTITUTIONS (Default values - override via trigger or CLI)
# ============================================================================
substitutions:
  _OPENAI_API_KEY: "REPLACE_WITH_YOUR_OPENAI_API_KEY"
  _EVOLUTION_API_KEY: "REPLACE_WITH_YOUR_EVOLUTION_API_KEY"
  _DB_ROOT_PASSWORD: "REPLACE_WITH_DB_ROOT_PASSWORD"
  _DB_USER_PASSWORD: "REPLACE_WITH_DB_USER_PASSWORD"

# ============================================================================
# OPTIONS
# ============================================================================
options:
  logging: CLOUD_LOGGING_ONLY

# ============================================================================
# TIMEOUT
# ============================================================================
timeout: "1800s" # 30 minutes
