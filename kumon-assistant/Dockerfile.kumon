# ============================================================================
# KUMON ASSISTANT - PRODUCTION DOCKERFILE
# Multi-stage build for optimized ML application container
# ============================================================================

# ============================================================================
# STAGE 1: Build Dependencies (Heavy ML Libraries)
# ============================================================================
FROM python:3.11-slim as builder

# Install system dependencies for building
RUN apt-get update && apt-get install -y \
    build-essential \
    gcc \
    g++ \
    git \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /build

# Create virtual environment for cleaner installs
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Upgrade pip and install wheel for faster builds
RUN pip install --no-cache-dir --upgrade pip wheel setuptools

# Copy requirements first for better layer caching
COPY requirements.txt .

# Install Python dependencies in virtual environment
# Split heavy ML libs for better caching
RUN pip install --no-cache-dir \
    torch==2.1.2 \
    torchvision==0.16.2 \
    transformers==4.36.2 \
    sentence-transformers==2.3.1

# Install remaining dependencies
RUN pip install --no-cache-dir -r requirements.txt

# ============================================================================
# STAGE 2: Production Runtime
# ============================================================================
FROM python:3.11-slim as runtime

# Install runtime system dependencies only
RUN apt-get update && apt-get install -y \
    curl \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Create non-root user for security
RUN useradd --create-home --shell /bin/bash kumon

# Copy virtual environment from builder stage
COPY --from=builder /opt/venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Set working directory
WORKDIR /app

# Create necessary directories with proper permissions
RUN mkdir -p /app/cache/embeddings \
    /app/data \
    /app/logs \
    && chown -R kumon:kumon /app

# Copy application code (app directory contains main.py)
COPY --chown=kumon:kumon ./app ./app
COPY --chown=kumon:kumon ./.env* ./

# Switch to non-root user
USER kumon

# Set environment variables
ENV PYTHONPATH=/app
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1

# Cache directories
ENV HF_HOME=/app/cache/huggingface
ENV TRANSFORMERS_CACHE=/app/cache/transformers
ENV EMBEDDING_CACHE_DIR=/app/cache/embeddings

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:8000/api/v1/health || exit 1

# Expose port
EXPOSE 8000

# Default command (main.py is in app directory)
CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--workers", "1"]

# ============================================================================
# STAGE 3: Development (Optional)
# ============================================================================
FROM runtime as development

# Switch back to root for development tools
USER root

# Install development dependencies
RUN apt-get update && apt-get install -y \
    vim \
    htop \
    git \
    && rm -rf /var/lib/apt/lists/*

# Install development Python packages
RUN pip install --no-cache-dir \
    pytest \
    pytest-asyncio \
    black \
    isort \
    ipython

# Switch back to kumon user
USER kumon

# Development command with auto-reload
CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload", "--workers", "1"] 