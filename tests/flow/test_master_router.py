# tests/flow/test_master_router.py

from unittest.mock import AsyncMock, patch

import pytest

from app.core.routing.master_router import master_router_async, master_router_sync


@pytest.mark.asyncio
async def test_router_prioritizes_continuation_rule_over_ai():
    """
    üß™ TESTE RED PHASE: Prova que a regra de continua√ß√£o n√£o tem prioridade sobre IA

    Este teste ir√° FALHAR at√© corrigirmos a hierarquia de decis√£o no master_router.
    A regra de continua√ß√£o (post_greeting_response) deve ter prioridade sobre a an√°lise da IA.
    """
    # Arrange - Estado que DEVE acionar continua√ß√£o (greeting_sent = True)
    state = {
        "text": "Gabriel",  # Resposta do usu√°rio fornecendo nome
        "phone": "5511999999999",
        "message_id": "test_123",
        "instance": "test_instance",
        "greeting_sent": True,  # üéØ CRUCIAL: Flag que deveria acionar continua√ß√£o
    }

    # Mock GeminiClassifier para retornar decis√£o INCORRETA da IA
    with patch("app.core.routing.master_router.classifier") as mock_classifier:
        with patch(
            "app.core.routing.master_router.get_conversation_state"
        ) as mock_get_state:
            with patch(
                "app.core.routing.master_router.get_conversation_history"
            ) as mock_get_history:
                # Setup mocks
                mock_get_state.return_value = {"greeting_sent": True}
                mock_get_history.return_value = []

                # üß† IA retorna decis√£o INCORRETA (deveria ser qualification mas retorna greeting)
                mock_classifier.classify = AsyncMock(
                    return_value={
                        "primary_intent": "greeting",  # ‚ùå DECIS√ÉO INCORRETA da IA
                        "secondary_intent": None,
                        "entities": {"parent_name": "Gabriel"},
                        "confidence": 0.95,
                    }
                )

                # Act - Executar master_router_async
                result = await master_router_async(state)

                # Assert - DEVE priorizar regra de continua√ß√£o sobre IA
                # ESTE TESTE VAI FALHAR porque o router atual segue a IA cegamente
                assert result == "qualification_node", (
                    f"Com greeting_sent=True, deve ir para qualification_node "
                    f"(regra de continua√ß√£o), mas foi para {result}. A IA retornou "
                    f"'greeting' incorretamente, mas a regra de neg√≥cio deve ter prioridade."
                )

                # Verificar que o estado foi atualizado com entidades
                assert "nlu_entities" in state
                assert state["nlu_entities"].get("parent_name") == "Gabriel"

                print(f"üîç Estado final: greeting_sent={state.get('greeting_sent')}")
                print("üîç Decis√£o da IA: greeting (incorreta)")
                print(f"üîç Decis√£o final: {result}")
                print("üîç Resultado esperado: qualification_node (regra de continua√ß√£o)")


@pytest.mark.asyncio
async def test_router_uses_ai_when_no_continuation_rule():
    """
    üß™ TESTE DE CONTROLE: Verifica que IA √© usada quando n√£o h√° regra de continua√ß√£o

    Este teste deve PASSAR mesmo com o bug, provando que o problema √© espec√≠fico
    da hierarquia de prioridades.
    """
    # Arrange - Estado SEM regra de continua√ß√£o
    state = {
        "text": "Ol√°, boa tarde!",
        "phone": "5511999999999",
        "message_id": "test_456",
        "instance": "test_instance"
        # üéØ SEM greeting_sent - n√£o h√° regra de continua√ß√£o
    }

    # Mock GeminiClassifier para retornar decis√£o correta da IA
    with patch("app.core.routing.master_router.classifier") as mock_classifier:
        with patch(
            "app.core.routing.master_router.get_conversation_state"
        ) as mock_get_state:
            with patch(
                "app.core.routing.master_router.get_conversation_history"
            ) as mock_get_history:
                # Setup mocks
                mock_get_state.return_value = {}  # Estado vazio
                mock_get_history.return_value = []

                # IA retorna decis√£o correta
                mock_classifier.classify = AsyncMock(
                    return_value={
                        "primary_intent": "greeting",
                        "secondary_intent": None,
                        "entities": {},
                        "confidence": 0.90,
                    }
                )

                # Act - Executar master_router_async
                result = await master_router_async(state)

                # Assert - DEVE seguir a IA quando n√£o h√° regra de continua√ß√£o
                assert result == "greeting_node", (
                    f"Sem regra de continua√ß√£o, deve seguir IA (greeting_node), "
                    f"mas retornou {result}"
                )

                print(f"‚úÖ Sem regra de continua√ß√£o: seguiu IA corretamente ({result})")


@pytest.mark.asyncio
async def test_master_router_async_sync_conflict():
    """
    üß™ RED PHASE: Prova o conflito async/sync no master_router

    Este teste ir√° FALHAR com RuntimeWarning ou TypeError devido ao conflito
    entre o master_router s√≠ncrono e o classifier ass√≠ncrono.

    PROBLEMA DETECTADO:
    - master_router() √© s√≠ncrono (def)
    - classifier.classify() √© ass√≠ncrono (async def)
    - Chamada: nlu_result = classifier.classify() SEM await

    SOLU√á√ÉO REQUERIDA:
    - master_router deve ser async def
    - Chamada deve usar: nlu_result = await classifier.classify()
    """
    print("\n--- üß™ RED PHASE: Teste de Conflito Async/Sync ---")

    # Estado simples para processamento
    state = {"text": "ol√°", "phone": "5511999999999", "message_id": "test_async_123"}

    # Mock do classifier como AsyncMock para simular comportamento real
    with patch("app.core.routing.master_router.classifier") as mock_classifier:
        with patch(
            "app.core.routing.master_router.get_conversation_state"
        ) as mock_get_state:
            with patch(
                "app.core.routing.master_router.get_conversation_history"
            ) as mock_get_history:
                # Setup mocks
                mock_get_state.return_value = {}
                mock_get_history.return_value = []

                # üéØ CR√çTICO: Mock classifier como fun√ß√£o async
                # Isso ir√° retornar uma corrotina que n√£o ser√° awaited
                mock_classifier.classify = AsyncMock(
                    return_value={
                        "primary_intent": "greeting",
                        "secondary_intent": None,
                        "entities": {},
                        "confidence": 0.95,
                    }
                )

                # Act - Agora master_router √© async, ent√£o deve funcionar corretamente
                import warnings

                with warnings.catch_warnings(record=True) as w:
                    warnings.simplefilter("always")
                    result = await master_router_async(state)  # ‚úÖ Agora com await

                    # Verificar se houve RuntimeWarning sobre corrotina n√£o esperada
                    runtime_warnings = [
                        warning
                        for warning in w
                        if issubclass(warning.category, RuntimeWarning)
                    ]
                    coroutine_warnings = [
                        warning
                        for warning in runtime_warnings
                        if "coroutine" in str(warning.message)
                    ]

                    if coroutine_warnings:
                        print("‚ùå AINDA H√Å CONFLITO ASYNC/SYNC:")
                        for warning in coroutine_warnings:
                            print(f"  üìã {warning.category.__name__}: {warning.message}")

                        raise AssertionError(
                            "GREEN PHASE FALHOU: Ainda h√° warnings de corrotina ap√≥s a corre√ß√£o. "
                            f"Resultado: {result}, Warnings: {len(coroutine_warnings)}"
                        )

                    # ‚úÖ GREEN PHASE: Sem warnings e resultado correto
                    print("‚úÖ CONFLITO RESOLVIDO: Sem RuntimeWarnings")
                    print(f"‚úÖ Resultado correto: {result}")
                    print(f"‚úÖ Total warnings: {len(w)} (sem corrotina)")

                    # Validar que o resultado √© o esperado (n√£o mais fallback)
                    assert result == "greeting_node", (
                        f"Com o conflito resolvido, deveria rotear corretamente para "
                        f"greeting_node, mas obteve {result}"
                    )

                    print("üéØ GREEN PHASE SUCESSO: master_router agora √© async!")
                    return


def test_master_router_sync_wrapper_works():
    """
    üîÑ TEST: Verifica que o wrapper s√≠ncrono funciona corretamente

    Este teste garante que master_router_sync executa master_router_async
    de forma s√≠ncrona, resolvendo o problema com LangGraph 0.0.26.
    """
    print("\n--- üîÑ TESTE: Wrapper S√≠ncrono para LangGraph 0.0.26 ---")

    # Estado simples para processamento
    state = {"text": "ol√°", "phone": "5511999999999", "message_id": "test_sync_wrapper"}

    # Mock do classifier como AsyncMock
    with patch("app.core.routing.master_router.classifier") as mock_classifier:
        with patch(
            "app.core.routing.master_router.get_conversation_state"
        ) as mock_get_state:
            with patch(
                "app.core.routing.master_router.get_conversation_history"
            ) as mock_get_history:
                # Setup mocks
                mock_get_state.return_value = {}
                mock_get_history.return_value = []

                mock_classifier.classify = AsyncMock(
                    return_value={
                        "primary_intent": "greeting",
                        "secondary_intent": None,
                        "entities": {},
                        "confidence": 0.95,
                    }
                )

                # Act - Executar wrapper S√çNCRONO (sem await)
                result = master_router_sync(state)

                # Assert - Deve funcionar perfeitamente
                print(f"‚úÖ Wrapper s√≠ncrono funcionou: {result}")
                assert (
                    result == "greeting_node"
                ), f"Wrapper s√≠ncrono deveria retornar greeting_node, mas retornou {result}"

                # Verificar que as entidades foram adicionadas ao estado
                assert "nlu_entities" in state
                print(f"‚úÖ Estado atualizado com NLU: {state.get('nlu_entities')}")

                print(
                    "üéØ WRAPPER S√çNCRONO FUNCIONANDO: Compat√≠vel com LangGraph 0.0.26!"
                )
                return
